plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'kr.vng'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        // spring boot의 기본은 logback이기 때문에 log4j2를 사용하기 위해서는 제외(아래에 log4j2 설정 존재)
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // helper
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // logging
    implementation 'org.springframework.boot:spring-boot-starter-log4j2' // log4j2
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // oracle jdbc
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'com.oracle.database.jdbc:ojdbc8:21.5.0.0'
    implementation 'com.oracle.ojdbc:orai18n:19.3.0.0'

    // http connection
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // java.lang utility
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:31.1-jre'

}

tasks.named('test') {
    useJUnitPlatform()
}

frontend {
    nodeDistributionProvided = true // node 설치 이전: false, 이후에는 true로 installNode 과정 통과
    nodeVersion = '16.15.0'
    nodeDistributionUrlRoot = 'https://nodejs.org/dist/'
    nodeInstallDirectory = file("${projectDir}/node")

    packageJsonDirectory = file("${projectDir}/frontend")

    yarnEnabled = true
    yarnVersion = 'berry'

    installScript = 'install'
    cleanScript = 'run clean'
    assembleScript = 'run build'
}

tasks.named('assembleFrontend') {
    doLast {
        copy {
            from "${projectDir}/frontend/build"
            into "${projectDir}/src/main/resources/static"
        }
        println "Copy from frontend to resources"
    }
}

clean.doFirst {
    delete "${projectDir}/src/main/resources/static/"
}